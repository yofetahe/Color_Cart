{"version":3,"sources":["images/NewEngen-Logo.svg","images/CartIcon.svg","API/api-call.js","Contexts/ColorsContext.js","component/header/Header.js","component/Colors/Color.js","component/Colors/Color-board.js","component/Cart/Color.js","component/Cart/SelectedColors.js","component/Cart/SavedColor.js","component/Cart/ColorPalette.js","component/Cart/PreviouslySavedColorPalettes.js","component/Cart/Cart-board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","client","ApolloClient","uri","ColorsContext","createContext","ColorsContextProvider","props","useState","loading","setLoading","colorsList","setColorsList","selectedColors","setSelectedColors","count","setCount","colorNumber","setColorNumber","colorPaletteName","setColorPaletteName","prevSavedColorPalette","setPrevSavedColorPalette","useEffect","query","gql","then","result","data","colors","window","onscroll","debounce","Math","round","innerHeight","document","documentElement","scrollTop","offsetHeight","prevNum","console","log","Provider","value","handleColorSelection","color","includes","c","push","prevCount","getElementById","id","style","boxShadow","handleColorDeletion","filter","LoadMore","handleFormSubmition","event","length","preventDefault","col","hex","title","val","newColorPalatte","handleInputChange","handleColorPaletteDeletion","paletteId","colorPalettes","children","useStyles","makeStyles","theme","margin","spacing","padding","Header","classes","useContext","className","Container","maxWidth","to","src","logo","alt","Badge","badgeContent","cart","Color","onClick","backgroundColor","ColorBoard","map","key","fontSize","SelectedColors","onSubmit","e","type","placeholder","name","onChange","target","ColorPalette","SavedColor","PreviouslySavedColorPalettes","CartBoard","Divider","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,uUCE9BC,EAAS,IAAIC,IAAa,CACrCC,IAAK,2D,4xBCIA,IAAMC,EAAgBC,0BAyKdC,EAvKe,SAACC,GAAW,IAAD,EAEPC,oBAAS,GAFF,mBAE9BC,EAF8B,KAErBC,EAFqB,OAGDF,mBAAS,IAHR,mBAG9BG,EAH8B,KAGlBC,EAHkB,OAIOJ,mBAAS,IAJhB,mBAI9BK,EAJ8B,KAIdC,EAJc,OAKXN,mBAAS,GALE,mBAK9BO,EAL8B,KAKvBC,EALuB,OAMCR,mBAAS,IANV,mBAM9BS,EAN8B,KAMjBC,EANiB,OAOWV,mBAAS,IAPpB,mBAO9BW,EAP8B,KAOZC,EAPY,OAQqBZ,mBAAS,IAR9B,mBAQ9Ba,EAR8B,KAQPC,EARO,KA6ErCC,qBAAU,WACNtB,EAAOuB,MAAM,CACTA,MAAOC,YAAF,IAKiBR,EACEA,KAO3BS,MAAK,SAAAC,GACFf,EAAce,EAAOC,KAAKC,QAC1BnB,GAAW,QAEjB,IAEFoB,OAAOC,SAAWC,KAAS,WAEnBC,KAAKC,MAAMJ,OAAOK,YAAcC,SAASC,gBAAgBC,aACvDF,SAASC,gBAAgBE,eAE3BrB,GAAe,SAAAsB,GAAO,OAAIA,EAAU,MAEpCC,QAAQC,IAAI,KAAMzB,MAGvB,KAwCH,OACI,kBAACb,EAAcuC,SAAf,CAAwBC,MAAO,CAC3BnC,UACAE,aACAE,iBACAgC,qBAzGR,SAA8BC,GAC1B,IAAIjC,EAAekC,SAASD,GAAO,CAC/B,IAAIE,EAAInC,EACRmC,EAAEC,KAAKH,GACPhC,EAAkBkC,GAClBhC,GAAS,SAAAkC,GAAS,OAAIA,EAAY,KAClCd,SAASe,eAAeL,EAAMM,IAAIC,MAAMC,UAAY,oBAoGpDC,oBAhGR,SAA6BT,GACzB,IAAIE,EAAInC,EAAe2C,QAAO,SAAAR,GAAC,OAAIA,IAAMF,KACzC9B,GAAS,SAAAkC,GAAS,OAAIA,EAAY,KAClCpC,EAAkBkC,IA8FdjC,QACA0C,SArIR,WACIvC,GAAe,SAAAsB,GAAO,OAAIA,EAAU,MACpCC,QAAQC,IAAIzB,GACZhB,EAAOuB,MAAM,CACTA,MAAOC,YAAF,IAKiBR,EACEA,KAQ3BS,MAAK,SAAAC,GACFf,EAAce,EAAOC,KAAKC,QAC1BnB,GAAW,OAkHXgD,oBA1CoB,SAACC,GACzB,GAAG9C,EAAe+C,OAAS,GAA0B,KAArBzC,EAAwB,CACpDwC,EAAME,iBAEN,IAAIC,EAAMjD,EAMViD,EAAIb,KALa,CACbG,GAAI,EACJW,IAAK,SACLC,MAAO,kBAGXlD,EAAkBgD,GAClBrB,QAAQC,IAAI7B,GAEZ,IAAIoD,EAAM5C,EACN6C,EAAkB,CAClBd,GAAI,EACJY,MAAO7C,EACPU,OAAQhB,GAEZoD,EAAIhB,KAAKiB,GACT5C,EAAyB2C,GACzBjD,GAAS,SAAAkC,GAAS,OAAIA,EAAY,KAClCpC,EAAkB,MAoBlBqD,kBAhDkB,SAACvB,GAEvBxB,EAAoBwB,IA+ChBvB,wBACA+C,2BAlBR,SAAoCC,GAChC5B,QAAQC,IAAI2B,GACZ,IAAIC,EAAgBjD,EAAsBmC,QAAO,SAAAR,GAAC,OAAIqB,IAAcrB,EAAEI,MACtE9B,EAAyBgD,MAiBnB/D,EAAMgE,W,gBC7JdC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACNA,OAAQD,EAAME,QAAQ,IAExBC,QAAS,CACPA,QAASH,EAAME,QAAQ,EAAG,QAiCjBE,EA7BA,WAEX,IAAMC,EAAUP,IAER3D,EAAmBmE,qBAAW5E,GAA9BS,eAER,OACI,yBAAKoE,UAAU,YACf,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAChB,6BACI,kBAAC,IAAD,CAAMC,GAAG,KACT,yBAAKC,IAAKC,IAAML,UAAU,OAAOM,IAAI,WAGzC,6BACI,kBAAC,IAAD,CAAMH,GAAG,SACL,yBAAKH,UAAU,QACX,kBAACO,EAAA,EAAD,CAAOP,UAAWF,EAAQJ,OAAQc,aAAc5E,EAAe+C,OAAQd,MAAM,WACzE,yBAAKuC,IAAKK,IAAMH,IAAI,gBCtBjCI,G,MAbD,SAACpF,GAAW,IAEdsC,EAAyBmC,qBAAW5E,GAApCyC,qBAER,OACI,yBAAKO,GAAI7C,EAAMuC,MAAMM,GAAI6B,UAAU,eAC/BW,QAAS,kBAAM/C,EAAqBtC,EAAMuC,QAC1CO,MAAO,CAACwC,gBAAiB,IAAItF,EAAMuC,MAAMiB,MACxCxD,EAAMuC,MAAMiB,OCWV+B,EAnBI,SAACvF,GAAW,IAAD,EAEgByE,qBAAW5E,GAA7CO,EAFkB,EAElBA,WAAY8C,EAFM,EAENA,SAAUhD,EAFJ,EAEIA,QAI9B,OACI,6BACI,6BACKA,EACAE,GAAcA,EAAWoF,KAAI,SAAAjD,GAC1B,OAAO,kBAAC,EAAD,CAAOkD,IAAKlD,EAAMM,GAAIN,MAAOA,QAG5C,4BAAQ8C,QAASnC,GAAjB,e,iCCEGkC,EAfD,SAACpF,GAAW,IAEdgD,EAAwByB,qBAAW5E,GAAnCmD,oBAER,OACI,yBAAK0B,UAAU,eACX5B,MAAO,CAACwC,gBAAiB,IAAItF,EAAMuC,MAAMiB,MACzC,6BACKxD,EAAMuC,MAAMiB,IACb,0BAAM6B,QAAS,kBAAMrC,EAAoBhD,EAAMuC,SAA/C,IAAwD,kBAAC,IAAD,CAAYmD,SAAS,UAA7E,QCcDC,EAvBQ,WAAO,IAAD,EAE0ClB,qBAAW5E,GAAtES,EAFiB,EAEjBA,eAAgBsD,EAFC,EAEDA,kBAAmBT,EAFlB,EAEkBA,oBAE3C,OACI,yBAAKuB,UAAU,WACX,wBAAIA,UAAU,SAAd,mCAECpE,EAAe+C,OAAS,EAAI/C,EAAekF,KAAI,SAAAjD,GAC5C,OAAO,kBAAC,EAAD,CAAOkD,IAAKlD,EAAMM,GAAIN,MAAOA,OACpC,yBAAKmC,UAAU,cAAf,8BAEJ,wBAAIA,UAAU,eAAd,oCACA,0BAAMkB,SAAU,SAACC,GAAD,OAAO1C,EAAoB0C,KACvC,2BAAOC,KAAK,OAAOC,YAAY,qBAC3BC,KAAK,mBAAmBnD,GAAG,mBAC3BoD,SAAU,SAACJ,GAAD,OAAOjC,EAAkBiC,EAAEK,OAAO7D,UAChD,4BAAQyD,KAAK,UAAb,mBCHDV,EAdD,SAACpF,GAAW,IAEd6D,EAA+BY,qBAAW5E,GAA1CgE,2BAER,OACI,yBAAKa,UAAU,eACX5B,MAAO,CAACwC,gBAAiB,IAAItF,EAAMuC,MAAMiB,MACzC,6BACwB,IAAnBxD,EAAMuC,MAAMM,GAAW7C,EAAMuC,MAAMiB,IAAM,kBAAC,IAAD,CAAYjB,MAAM,YAAY8C,QAAS,kBAAIxB,EAA2B7D,EAAM8D,iBCAvHqC,EAXM,SAACnG,GAClB,OACI,6BACI,4BAAKA,EAAMuC,MAAMkB,MAAjB,MAA2BzD,EAAMuC,MAAMjB,OAAO+B,OAA9C,WACCrD,EAAMuC,MAAMjB,OAAOkE,KAAI,SAAAjD,GACpB,OAAO,kBAAC6D,EAAD,CAAYX,IAAKlD,EAAMM,GAAIN,MAAOA,EAAOuB,UAAW9D,EAAMuC,MAAMM,UCcxEwD,EAhBsB,WAAO,IAEhCvF,EAA0B2D,qBAAW5E,GAArCiB,sBAER,OACI,6BACI,wBAAI4D,UAAU,SAAd,mCACA,6BACK5D,EAAsB0E,KAAI,SAAAjD,GACvB,OAAO,kBAAC,EAAD,CAAcA,MAAOA,EAAOkD,IAAKlD,EAAMM,WCSnDyD,EAhBG,WAAO,IAEbxF,EAA0B2D,qBAAW5E,GAArCiB,sBAER,OACI,6BACKA,EACD,kBAAC,EAAD,MAEA,kBAACyF,EAAA,EAAD,MAEA,kBAAC,EAAD,QCeGC,MApBf,WACE,OACE,kBAAC,IAAD,CAAgB9G,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAKgF,UAAU,OACf,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,QAAQC,UAAWL,WCb/BM,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpF,SAASe,eAAe,SD2H3C,kBAAmBsE,WACrBA,UAAUC,cAAcC,MAAMjG,MAAK,SAAAkG,GACjCA,EAAaC,kB","file":"static/js/main.30f5c14d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NewEngen-Logo.56b04b4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/CartIcon.39a60626.svg\";","import ApolloClient from 'apollo-boost';\r\n//https://48p1r2roz4.sse.codesandbox.io\r\nexport const client = new ApolloClient({\r\n  uri: 'https://colourlovers-graphql-api.herokuapp.com/graphql',\r\n});","import React, { createContext, useState, useEffect } from 'react';\r\n// import { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { client } from '../API/api-call'\r\n\r\nexport const ColorsContext = createContext();\r\n\r\nconst ColorsContextProvider = (props) => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [colorsList, setColorsList] = useState([]);\r\n    const [selectedColors, setSelectedColors] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const [colorNumber, setColorNumber] = useState(40);\r\n    const [colorPaletteName, setColorPaletteName] = useState(\"\");\r\n    const [prevSavedColorPalette, setPrevSavedColorPalette] = useState([]);\r\n\r\n    // const LOAD_MORE_COLOR = gql`\r\n    // {\r\n    //     colors(\r\n    //         orderCol: \"rgb\"\r\n    //         sortBy: \"id\"\r\n    //         numResults: 50\r\n    //         resultOffset: 50) {\r\n    //             id\r\n    //             title\r\n    //             hex\r\n    //             imageUrl\r\n    //     }\r\n    // }`;\r\n    function LoadMore() {\r\n        setColorNumber(prevNum => prevNum + 21);\r\n        console.log(colorNumber);        \r\n        client.query({\r\n            query: gql`\r\n            {\r\n                colors(\r\n                    orderCol: \"rgb\"\r\n                    sortBy: \"id\"\r\n                    numResults: ${colorNumber}\r\n                    resultOffset: ${colorNumber}) {\r\n                        id\r\n                        title\r\n                        hex\r\n                        imageUrl\r\n                }\r\n            }`\r\n        })\r\n        .then(result => {\r\n            setColorsList(result.data.colors);\r\n            setLoading(false);\r\n        });      \r\n        // const { loading, error, data } = useQuery(LOAD_MORE_COLOR).then(result => setColorsList(result.data.colors));    \r\n    }\r\n\r\n    function handleColorSelection(color) {\r\n        if(!selectedColors.includes(color)){\r\n            var c = selectedColors;        \r\n            c.push(color);\r\n            setSelectedColors(c);\r\n            setCount(prevCount => prevCount + 1);\r\n            document.getElementById(color.id).style.boxShadow = \"4px 4px #888888\";            \r\n        }\r\n    }\r\n\r\n    function handleColorDeletion(color) {\r\n        var c = selectedColors.filter(c => c !== color);\r\n        setCount(prevCount => prevCount - 1);\r\n        setSelectedColors(c);\r\n    }\r\n\r\n    // const COLORS_LIST = gql`\r\n    // {\r\n    //     colors(\r\n    //         orderCol: \"rgb\"\r\n    //         sortBy: \"id\"\r\n    //         numResults: 28\r\n    //         resultOffset: 28) {\r\n    //             id\r\n    //             title\r\n    //             hex\r\n    //             imageUrl\r\n    //     }\r\n    // }`;\r\n    useEffect(()=> {\r\n        client.query({\r\n            query: gql`\r\n            {\r\n                colors(\r\n                    orderCol: \"rgb\"\r\n                    sortBy: \"id\"\r\n                    numResults: ${colorNumber}\r\n                    resultOffset: ${colorNumber}) {\r\n                        id\r\n                        title\r\n                        hex\r\n                }\r\n            }`\r\n        })\r\n        .then(result => {\r\n            setColorsList(result.data.colors);\r\n            setLoading(false);\r\n        });\r\n    },[])\r\n\r\n    window.onscroll = debounce(() => {        \r\n        if (\r\n            Math.round(window.innerHeight + document.documentElement.scrollTop)\r\n          === document.documentElement.offsetHeight\r\n        ) {\r\n            setColorNumber(prevNum => prevNum + 21);\r\n            // setCount(prevCount => prevCount + 1);\r\n            console.log(\"IN\", colorNumber);\r\n            // LoadMore();            \r\n        }\r\n    }, 100);\r\n\r\n    const handleInputChange = (value) =>{\r\n        \r\n        setColorPaletteName(value);\r\n    }\r\n\r\n    const handleFormSubmition = (event) => {\r\n        if(selectedColors.length > 0 && colorPaletteName !== \"\"){\r\n            event.preventDefault();\r\n\r\n            var col = selectedColors;\r\n            var deleteCell = {\r\n                id: 0,\r\n                hex: \"f8f9fa\",\r\n                title: \"DeletePalette\"\r\n            }\r\n            col.push(deleteCell);\r\n            setSelectedColors(col);\r\n            console.log(selectedColors);\r\n\r\n            var val = prevSavedColorPalette;            \r\n            var newColorPalatte = {\r\n                id: 1,\r\n                title: colorPaletteName,\r\n                colors: selectedColors\r\n            }\r\n            val.push(newColorPalatte);\r\n            setPrevSavedColorPalette(val);\r\n            setCount(prevCount => prevCount + 1);\r\n            setSelectedColors([]);\r\n        }\r\n    }\r\n\r\n    function handleColorPaletteDeletion(paletteId){\r\n        console.log(paletteId);\r\n        var colorPalettes = prevSavedColorPalette.filter(c => paletteId !== c.id);\r\n        setPrevSavedColorPalette(colorPalettes);\r\n    }\r\n\r\n    return (\r\n        <ColorsContext.Provider value={{\r\n            loading, \r\n            colorsList, \r\n            selectedColors, \r\n            handleColorSelection, \r\n            handleColorDeletion, \r\n            count, \r\n            LoadMore, \r\n            handleFormSubmition, \r\n            handleInputChange, \r\n            prevSavedColorPalette,\r\n            handleColorPaletteDeletion }}>\r\n\r\n            { props.children }\r\n        </ColorsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default ColorsContextProvider;","import React, { useContext } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport './Header.css';\r\nimport logo from '../../images/NewEngen-Logo.svg'\r\nimport cart from '../../images/CartIcon.svg';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    margin: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    padding: {\r\n      padding: theme.spacing(0, 2),\r\n    },\r\n  }));\r\n\r\nconst Header = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { selectedColors } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div className=\"myheader\">\r\n        <Container maxWidth=\"lg\">\r\n            <div>\r\n                <Link to=\"/\">\r\n                <img src={logo} className=\"logo\" alt=\"logo\" />\r\n                </Link>\r\n            </div>\r\n            <div>\r\n                <Link to=\"/cart\">\r\n                    <div className=\"cart\" >                     \r\n                        <Badge className={classes.margin} badgeContent={selectedColors.length} color=\"primary\">\r\n                            <img src={cart} alt=\"cart\" />\r\n                        </Badge>\r\n                    </div>\r\n                </Link>                \r\n            </div>            \r\n        </Container>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Header;","import React, { useContext } from 'react';\r\n\r\nimport './Colors.css'\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst Color = (props) => {\r\n\r\n    const { handleColorSelection } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div id={props.color.id} className=\"colorDisplay\" \r\n            onClick={() => handleColorSelection(props.color)} \r\n            style={{backgroundColor: \"#\"+props.color.hex}}>\r\n            {props.color.hex}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Color;","import React, {useContext} from 'react';\r\n\r\nimport Color from './Color';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst ColorBoard = (props) => {\r\n    \r\n    const { colorsList, LoadMore, loading } = useContext(ColorsContext);\r\n\r\n    // const colors = [\"#bb2341\", \"#23A4BB\", \"#2c2c2c\", \"#C68135\", \"#BB23A8\", \"#9DB77A\", \"#06691A\"];\r\n        \r\n    return (\r\n        <div>            \r\n            <div>\r\n                {loading}\r\n                {colorsList && colorsList.map(color => {\r\n                    return <Color key={color.id} color={color} />\r\n                })}\r\n            </div>\r\n            <button onClick={LoadMore}>Load More</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorBoard;","import React, { useContext } from 'react';\r\n\r\nimport './Cart.css'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst Color = (props) => {\r\n\r\n    const { handleColorDeletion } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div className=\"colorDisplay\" \r\n            style={{backgroundColor: \"#\"+props.color.hex}}>\r\n            <div> \r\n                {props.color.hex} \r\n                <span onClick={() => handleColorDeletion(props.color)}> <DeleteIcon fontSize=\"small\" /> </span> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Color;","import React, { useContext } from 'react';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\nimport Color from './Color';\r\n\r\nimport './Cart.css';\r\n\r\nconst SelectedColors = () => {\r\n\r\n    const { selectedColors, handleInputChange, handleFormSubmition } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h3 className=\"title\">Your Current color Cart Palette</h3>\r\n\r\n            {selectedColors.length > 0 ? selectedColors.map(color => {\r\n                return <Color key={color.id} color={color} />\r\n            }): <div className=\"no-content\">There is no selected color</div>}\r\n\r\n            <h5 className=\"small-title\">Name and Save your color Palette</h5>\r\n            <form onSubmit={(e) => handleFormSubmition(e)}>               \r\n                <input type=\"text\" placeholder=\"Color Palette Name\" \r\n                    name=\"colorPaletteName\" id=\"colorPaletteName\"\r\n                    onChange={(e) => handleInputChange(e.target.value)}/>\r\n                <button type=\"submit\">Save Palette</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectedColors;","import React, { useContext } from 'react';\r\n\r\nimport './Cart.css'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst Color = (props) => {\r\n\r\n    const { handleColorPaletteDeletion } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div className=\"colorDisplay\" \r\n            style={{backgroundColor: \"#\"+props.color.hex}}>\r\n            <div> \r\n                {props.color.id !== 0 ? props.color.hex : <DeleteIcon color=\"secondary\" onClick={()=>handleColorPaletteDeletion(props.paletteId)} />} \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Color;","import React from 'react';\r\n\r\nimport SavedColor from './SavedColor';\r\n\r\nconst ColorPalette = (props) => {\r\n    return (\r\n        <div>\r\n            <h4>{props.color.title} - {props.color.colors.length} colors</h4>\r\n            {props.color.colors.map(color => {\r\n                return <SavedColor key={color.id} color={color} paletteId={props.color.id} />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorPalette;","import React, { useContext } from 'react';\r\n\r\nimport './Cart.css';\r\nimport ColorPalette from './ColorPalette';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst PreviouslySavedColorPalettes = () => {\r\n    \r\n    const { prevSavedColorPalette } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div>            \r\n            <h3 className=\"title\">Previously saved color Palettes</h3>\r\n            <div>\r\n                {prevSavedColorPalette.map(color => {\r\n                    return <ColorPalette color={color} key={color.id} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreviouslySavedColorPalettes;","import React, { useContext } from 'react';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport SelectedColors from './SelectedColors';\r\nimport PreviouslySavedColorPalettes from './PreviouslySavedColorPalettes';\r\n\r\nimport { ColorsContext } from '../../Contexts/ColorsContext';\r\n\r\nconst CartBoard = () => {\r\n\r\n    const { prevSavedColorPalette } = useContext(ColorsContext);\r\n\r\n    return (\r\n        <div>\r\n            {prevSavedColorPalette}\r\n            <SelectedColors />\r\n\r\n            <Divider />\r\n\r\n            <PreviouslySavedColorPalettes />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CartBoard","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Header from './component/header/Header';\nimport ColorBoard from './component/Colors/Color-board';\nimport CartBoard from './component/Cart/Cart-board';\n\nimport { client } from './API/api-call'\nimport ColorsContextProvider from './Contexts/ColorsContext';\n\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"App\">\n        <ColorsContextProvider>\n            <Header />\n            <Container maxWidth=\"lg\">  \n            <Switch>            \n              <Route exact path=\"/\" component={ColorBoard} />\n              <Route exact path=\"/cart\" component={CartBoard} />            \n            </Switch>\n            </Container>    \n          </ColorsContextProvider>      \n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}